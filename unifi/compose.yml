name: unifi
services:
  unifi-db:
    container_name: unifi-db
    image: docker.io/mongo:3.6
    configs:
      - source: init-mongo.js
        target: /docker-entrypoint-initdb.d/init-mongo.js
    environment:
      - PGID=1000
      - PUID=1000
      - TZ=Etc/UTC
#    ports:
#      - target: 27017
#        published: "27017"
#        protocol: tcp
    restart: unless-stopped
    volumes:
      - type: bind
        source: /srv/unifi/db
        target: /data/db
    networks:
      - unifi
    privileged: false
    deploy:
      resources:
        limits:
          memory: 1g
          cpus: "1"
  unifi-network-application:
    container_name: unifi-network-application
    depends_on:
      unifi-db:
        condition: service_started
        required: true
    environment:
      - MONGO_DBNAME=unifi-db
      - MONGO_HOST=unifi-db
      - MONGO_PASS=REDACTED
      - MONGO_PORT=27017
      - MONGO_USER=unifi
      - PGID=1000
      - PUID=1000
      - TZ=Etc/UTC
    image: lscr.io/linuxserver/unifi-network-application:latest
    ports:
      - 3478:3478/udp
      - 6789:6789
      - 8080:8080
      - 8443:8443
      - 8843:8843
      - 10001:10001/udp
    restart: unless-stopped
    volumes:
      - type: bind
        source: /mnt/huge/unifi/network-application
        target: /config
    networks:
      - unifi
      - proxy
    privileged: false
    deploy:
      resources:
        limits:
          memory: 1g
          cpus: "1"
networks:
  unifi:
    driver: bridge
    ipam:
      config:
        - subnet: 172.28.0.0/16
  proxy:
    external: true
configs:
  init-mongo.js:
    content: >
      db.getSiblingDB("unifi-db").createUser({user: "unifi", pwd: "REDACTED", roles:
      [{role: "dbOwner", db: "unifi-db"}]}); 

      db.getSiblingDB("unifi-db_stat").createUser({user: "unifi", pwd: "REDACTED", roles: [{role: "dbOwner", db: "unifi-db_stat"}]});
